# Action to get the latest release information for a given environment configuration.

name: get-latest-release-information
description: Get the latest release information for this environment config.

inputs:
  release-prefix:
    description: The prefix of the environment configuration.
    required: true
  github-releases-url:
    description: The GitHub releases URL.
    required: true
outputs:
  release-name:
    description: The Git tag of the latest release.
    value: ${{ steps.latest-release.outputs.latest-release }}
  version-number:
    description: The version of the latest release.
    value: ${{ steps.latest-release.outputs.latest-release-version-number }}
  major-version-number:
    description: The major version number of the latest release.
    value: ${{ steps.latest-release.outputs.latest-release-major-version-number }}
  minor-version-number:
    description: The minor version number of the latest release.
    value: ${{ steps.latest-release.outputs.latest-release-minor-version-number }}
  build-version-number:
    description: The build version number of the latest release.
    value: ${{ steps.latest-release.outputs.latest-release-build-version-number }}
  download-url:
    description: The download URL of the latest release.
    value: ${{ steps.latest-release.outputs.latest-release-url }}
  file-hash:
    description: The SHA 512 hash of the latest release version.
    value: ${{ steps.latest-release.outputs.latest-release-file-hash }}
  folder-hash:
    description: The SHA 512 hash of all files of the latest release version.
    value: ${{ steps.latest-release.outputs.latest-release-folder-hash }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
runs:
  using: composite
  # Steps represent a sequence of tasks that will be executed as part of the job
  steps:
    - name: Get Latest Tag
      id: get-latest-tag
      uses: oprypin/find-latest-tag@v1.1.1
      with:
        repository: jasonmcboyd/Environment
        releases-only: true
        prefix: "${{ inputs.release-prefix }}-v"

    # I have to jump through a lot of hoops here to verify the hash. For some reason the hash changes after a zip has been
    # uploaded to GitHub. I think during the upload they decompress and then recompress with their algorithm of choice which
    # is different from Compress-Archive. The different algorithm results in a different zip file with a different file hash.
    - name: Get Latest Release Information
      id: latest-release
      shell: powershell
      run: |
        $latestRelease = '${{ steps.get-latest-tag.outputs.tag }}'
        $releaseInfo = ./Publish/PowerShellScripts/GetGitHubReleaseInfo.ps1 -ReleaseTag $latestRelease -GitHubReleasesUrl ${{ inputs.github-releases-url }}

        echo "release-name=$latestRelease"                       >> $env:GITHUB_OUTPUT
        echo "version-number=$($releaseInfo.Version)"            >> $env:GITHUB_OUTPUT
        echo "major-version-number=$($releaseInfo.MajorVersion)" >> $env:GITHUB_OUTPUT
        echo "minor-version-number=$($releaseInfo.MinorVersion)" >> $env:GITHUB_OUTPUT
        echo "build-version-number=$($releaseInfo.BuildVersion)" >> $env:GITHUB_OUTPUT
        echo "download-url=$($releaseInfo.ReleaseUrl)"           >> $env:GITHUB_OUTPUT
        echo "file-hash=$($releaseInfo.FileHash)"                >> $env:GITHUB_OUTPUT
        echo "folder-hash=$($releaseInfo.FolderHash)"            >> $env:GITHUB_OUTPUT

        echo "Release Name: $latestRelease"
        echo "Version Number: $($releaseInfo.Version)"
        echo "Major Version Number: $($releaseInfo.MajorVersion)"
        echo "Minor Version Number: $($releaseInfo.MinorVersion)"
        echo "Build Version Number: $($releaseInfo.BuildVersion)"
        echo "Download URL: $($releaseInfo.ReleaseUrl)"
        echo "File Hash: $($releaseInfo.FileHash)"
        echo "Folder Hash: $($releaseInfo.FolderHash)"
