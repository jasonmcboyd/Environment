# This is a basic workflow to help you get started with Actions

name: Vim CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get Files Changed Count
        id: files-changed-count
        run: echo "::set-output name=COUNT::$((git diff HEAD~ --name-only -- ./Vim | Measure-Object).Count)"

      - name: Write Files Changed Count
        run: echo "${{ steps.files-changed-count.outputs.COUNT }}"

      - name: Zip Files
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: Compress-Archive ./Vim/* ./vim.zip

      - name: Get Archive Hash
        id: get-archive-hash
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: echo "::set-output name=HASH::$($(Get-FileHash -Path ./vim.zip -Algorithm sha512).Hash)"

      - name: Get Previous Release
        id: get-previous-release
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        uses: oprypin/find-latest-tag@e6d7a96b985a7dda6080e43e12771ad3a90fd389
        with:
          repository: jasonmcboyd/Environment
          releases-only: true
          prefix: "vim-"

      - name: Write Previous Release
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: echo "${{ steps.get-previous-release.outputs.tag }}"

      - name: Get Next Version
        id: get-next-version
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: |
          '${{ steps.get-previous-release.outputs.tag }}' -match 'vim-v(?<major>\d+)\.'
          echo "::set-output name=VERSION::$([int]$Matches.major + 1).0.0"

      - name: Write Next Version
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: echo "${{ steps.get-next-version.outputs.VERSION }}"

      - name: Get Next Release
        id: get-next-release
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: echo "::set-output name=NEXT_RELEASE::vim-v${{ steps.get-next-version.outputs.VERSION }}"

      - name: Write Next Release
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: echo "${{ steps.get-next-release.outputs.NEXT_RELEASE }}"

      - name: Release
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        uses: softprops/action-gh-release@v1
        with:
          files: vim.zip
          tag_name: ${{ steps.get-next-release.outputs.NEXT_RELEASE }}

      - name: Setup .NET Core
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        uses: actions/setup-dotnet@v1

      - name: Push NuGet Package
        # if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        run: |
          cd Nuspec/environment-vim-config
          $xml = [xml](Get-Content ./environment-vim-config.nuspec -Raw)
          $xml.package.metadata.version = "${{ steps.get-next-version.outputs.VERSION }}"
          Set-Content -Path ./environment-vim-config.nuspec -Value $xml.OuterXml
          Set-Content -Path ./tools/chocolateyInstall.ps1 -Value @"
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $packageArgs = @{
            packageName   = 'environment-vim-config'
            unzipLocation = `$env:USERPROFILE
            url           = 'https://github.com/jasonmcboyd/Environment/releases/download/${{ steps.get-next-release.outputs.NEXT_RELEASE }}/vim.zip'
            checksum      = '${{ steps.get-archive-hash.outputs.HASH }}'
            checksumType  = 'sha512'
          }

          Install-ChocolateyZipPackage @packageArgs
          "@
          choco pack ./environment-vim-config.nuspec
          dotnet nuget add source '${{ secrets.AZURE_DEVOPS_NUGET_FEED }}' --name environment --username ${{ secrets.AZURE_DEVOPS_USERNAME }} --password ${{ secrets.AZURE_DEVOPS_PAT }}
          dotnet nuget push environment-vim-config.${{ steps.get-next-version.outputs.VERSION }}.nupkg --source environment
