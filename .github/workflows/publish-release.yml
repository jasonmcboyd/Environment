# This is a basic workflow to help you get started with Actions

name: Publish Release

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      github-releases-url:
        required: true
        type: string
      release-prefix:
        required: true
        type: string
      subdirectory:
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main
        with:
          fetch-depth: 2

      - name: Get Latest Release Information
        id: latest-release
        uses: ./.github/actions/get-latest-release-information
        with:
          release-prefix: ${{ inputs.release-prefix }}
          github-releases-url: ${{ inputs.github-releases-url }}

      - name: Zip Files
        id: zip-files
        run: |
          Compress-Archive ./${{ inputs.subdirectory }}/* ./${{ inputs.release-prefix }}.zip

          $archiveName = "${{ inputs.release-prefix }}.zip"

          try {
            mkdir working-zip-files
            Expand-Archive -Path $archiveName -DestinationPath working-zip-files
            $folderHash = ./Publish/PowerShellScripts/GetFolderHash.ps1 -Path working-zip-files
          }
          finally {
            if (Test-Path working-zip-files) {
              Remove-Item working-zip-files -Recurse
            }
          }

          ./Publish/PowerShellScripts/WriteGitHubOutputs.ps1 -HashTable @{ ArchiveName = $archiveName; FolderHash = $folderHash }

      - name: Get Next Release Information
        id: get-next-release
        run: |
          $nextVersion ="$([int]${{ steps.latest-release.outputs.major-version-number }} + 1).0.0"
          $nextRelease = "${{ inputs.release-prefix }}-v$nextVersion"

          ./Publish/PowerShellScripts/WriteGitHubOutputs.ps1 -HashTable @{ NextRelease = $nextRelease; }

      - name: Release
        if: ${{ steps.latest-release.outputs.folder-hash != steps.zip-files.outputs.folder-hash }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.zip-files.outputs.archive-name }}
          tag_name: ${{ steps.get-next-release.outputs.next-release }}
