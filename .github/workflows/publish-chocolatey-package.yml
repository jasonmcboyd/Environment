# This is a basic workflow to help you get started with Actions

name: Publish Chocolatey Package

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      release-prefix:
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main
        with:
          fetch-depth: 2

      - name: Get Chocolatey Version
        id: chocolatey-version
        uses: ./.github/actions/get-chocolatey-package-and-version
        with:
          release-prefix: ${{ inputs.release-prefix }}
          AZURE_DEVOPS_NUGET_FEED: ${{ secrets.AZURE_DEVOPS_NUGET_FEED }}
          AZURE_DEVOPS_USERNAME: ${{ secrets.AZURE_DEVOPS_USERNAME }}
          AZURE_DEVOPS_PAT: ${{ secrets.AZURE_dEVOPS_PAT }}

      - name: Get Latest Release Information
        id: latest-release
        uses: ./.github/actions/get-latest-release-information
        with:
          release-prefix: ${{ inputs.release-prefix }}

      - name: Push NuGet Package
        if: ${{ steps.chocolatey-version.outputs.chocolatey-package-version != steps.latest-release.outputs.latest-release-version-number }}
        run: |
          cd ./Publish/environment-${{ inputs.release-prefix }}
          mkdir /working/tools
          Copy-Item ./*.nuspec /working
          $outputs = ls (Split-Path $env:GITHUB_OUTPUT) -Recurse | select -ExpandProperty FullName | ? { $_ -like '*output*' }
          $outputs
          $outputs | % { cat $_ }
          $latestReleaseFileHash = '${{ steps.latest-release.outputs.latest-release-file-hash }}'
          echo "Latest Release File Hash: $latestReleaseFileHash"
          $installScript = ./createChocolateyInstallScript.ps1 -ReleaseUrl ${{ steps.latest-release.outputs.latest-release-url }} -ReleaseFileHash ${{ steps.latest-release.outputs.latest-release-file-hash }}
          Set-Content -Path /working/tools/chocolateyInstall.ps1 -Value $installScript
          cd /working
          choco pack ./environment-${{ inputs.release-prefix }}.nuspec --version=${{ steps.latest-release.outputs.latest-release-version-number }}
          dotnet nuget add source '${{ secrets.AZURE_DEVOPS_NUGET_FEED }}' --name environment --username ${{ secrets.AZURE_DEVOPS_USERNAME }} -p ${{ secrets.AZURE_DEVOPS_PAT }}
          dotnet nuget push environment-${{ inputs.release-prefix }}.${{ steps.latest-release.outputs.latest-release-version-number }}.nupkg --source environment --api-key AzureDevOps
