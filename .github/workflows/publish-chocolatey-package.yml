# This is a basic workflow to help you get started with Actions

name: Publish Chocolatey Package

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      azure-devops-nuget-url-v2:
        required: true
        type: string
      azure-devops-nuget-url-v3:
        required: true
        type: string
      azure-devops-username:
        required: true
        type: string
      github-releases-url:
        required: true
        type: string
      release-prefix:
        required: true
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main
        with:
          fetch-depth: 2

      - name: Get Chocolatey Package Info
        id: chocolatey-package-info
        uses: ./.github/actions/get-chocolatey-package-info
        with:
          release-prefix: ${{ inputs.release-prefix }}
          azure-devops-nuget-url-v3: ${{ inputs.azure-devops-nuget-url-v3 }}
          azure-devops-username: ${{ inputs.azure-devops-username }}
          azure-devops-pat: ${{ secrets.AZURE_DEVOPS_PAT }}

      - name: Get Latest Release Information
        id: latest-release-info
        uses: ./.github/actions/get-latest-release-information
        with:
          release-prefix: ${{ inputs.release-prefix }}
          github-releases-url: ${{ inputs.github-releases-url }}

      - name: Create NuGet Package
        id: create-nuget-package
        shell: pwsh
        run: |
          $packageInfo =
            ./Publish/PowerShellScripts/CreateNuGetPackage `
              -ReleasePrefix ${{ inputs.release-prefix }} `
              -ReleaseDownloadUrl ${{ steps.latest-release-info.outputs.download-url }} `
              -ReleaseVersion ([Version]::new("${{ steps.latest-release-info.outputs.version-number }}")) `
              -ReleaseFileHash ${{ steps.latest-release-info.outputs.file-hash }} `
              -PackageVersion ([Version]::new("${{ steps.chocolatey-package-info.outputs.version-number }}")) `
              -PackageFileHash ${{ steps.chocolatey-package-info.outputs.file-hash }}

          # TODO: Remove This
          $packageInfo | % { Write-Host $_ }

          ./Publish/PowerShellScripts/WriteGitHubOutputs.ps1 -HashTable $packageInfo

      - name: Push NuGet Package
        if: ${{ steps.chocolatey-package-info.file-hash != steps.create-nuget-package.file-hash }}
        shell: pwsh
        run: |
          dotnet nuget add source '${{ inputs.azure_devops_nuget_url_v2 }}' --name environment --username ${{ inputs.azure_devops_username }} -p ${{ secrets.AZURE_DEVOPS_PAT }}
          dotnet nuget push ${{ steps.create-nuget-package.outputs.package-path }} --source environment --api-key AzureDevOps
