# This is a basic workflow to help you get started with Actions

name: release-and-publish

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      subdirectory:
        required: true
        type: string
      release_prefix:
        required: true
        type: string
      files_to_archive:
        required: true
        type: string
    secrets:
      AZURE_DEVOPS_NUGET_FEED:
        required: true
      AZURE_DEVOPS_USERNAME:
        required: true
      AZURE_DEVOPS_PAT:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main
        with:
          fetch-depth: 2

      - name: Get Files Changed Count
        id: changed-files-count
        run: |
          $changedFilesCount = $((git diff HEAD~ --name-only -- ./${{ inputs.subdirectory }} ./.github/workflows/${{ inputs.release_prefix }}.yml ./Nuspec/environment-${{ inputs.release_prefix }} | Measure-Object).Count)
          echo "ChangedFilesCount=$changedFilesCount" >> $env:GITHUB_OUTPUT
          echo "Changed Files: $changedFilesCount"

      - name: Get Latest Tag
        id: get-latest-tag
        uses: oprypin/find-latest-tag@v1.1.1
        with:
          repository: jasonmcboyd/Environment
          releases-only: true
          prefix: "${{ inputs.release_prefix }}-v"

      - name: Get Latest Release Information
        id: latest-release
        run: |
          $latestRelease = '${{ steps.get-latest-tag.outputs.tag }}'
          '${{ steps.get-latest-tag.outputs.tag }}' -match '${{ inputs.release_prefix }}-v(?<major>\d+)\.' | Out-Null
          $majorVersionNumber = $Matches.major
          $versionNumber = "$majorVersionNumber.0.0"
          $latestReleaseUrl = "https://github.com/jasonmcboyd/Environment/releases/download/$latestRelease/${{ inputs.release_prefix }}.zip"
          echo "LatestRelease=$latestRelease" >> $env:GITHUB_OUTPUT
          echo "LatestReleaseMajorVersionNumber=$majorVersionNumber" >> $env:GITHUB_OUTPUT
          echo "LatestReleaseVersionNumber=$versionNumber" >> $env:GITHUB_OUTPUT
          echo "LatestReleaseUrl=$latestReleaseUrl" >> $env:GITHUB_OUTPUT
          echo "Latest Release: $latestRelease"
          echo "Latest Release Major Version Number: $majorVersionNumber"
          echo "Latest Release Version Number: $versionNumber"
          echo "Latest Release URL: $latestReleaseUrl"

      - name: Zip Files
        id: zip-files
        if: ${{ steps.changed-files-count.outputs.ChangedFilesCount != 0 }}
        run: |
          Compress-Archive ('${{ inputs.files_to_archive }}'.split('|') -join ' ') ./${{ inputs.release_prefix }}.zip
          echo "ArchiveName=${{ inputs.release_prefix }}.zip" >> $env:GITHUB_OUTPUT

      - name: Get Next Release Information
        id: get-next-version
        if: ${{ steps.changed-files-count.outputs.ChangedFilesCount != 0 }}
        run: |
          $nextVersion =$([int]${{ steps.latest-release.output.LatestReleaseMajorVersionNumber }} + 1).0.0"
          $nextRelease = "${{ inputs.release_prefix }}-v$nextVersion"
          echo "NextVersion=$nextVersion" >> $env:GITHUB_OUTPUT
          echo "NextRelease=$nextRelease" >> $env:GITHUB_OUTPUT
          echo "Next Version: $nextVersion"
          echo "Next Release: $nextRelease"

      - name: Release
        if: ${{ steps.changed-files-count.outputs.changedFilesCount != 0 }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.zip-files.outputs.ArchiveName }}
          tag_name: ${{ steps.get-next-release.outputs.NextRelease }}

      - name: Get Chocolatey Version
        id: chocolatey-version
        run: |
          $chocolateyNugetFeedUrl = "${{ secrets.AZURE_DEVOPS_NUGET_FEED }}".Replace('v3/index.json', 'v2')
          choco sources add -n environment -u ${{ secrets.AZURE_DEVOPS_USERNAME }} -p ${{ secrets.AZURE_DEVOPS_PAT }} -s "$chocolateyNugetFeedUrl"
          $chocolateyPackage = choco search environment-${{ inputs.release_prefix }} --source environment --limitoutput --exact
          $chocolateyPackageVersion = $chocolateyPackage.Split('|')[1]
          echo "ChocolateyPackageVersion=$chocolateyPackageVersion" >> $env:GITHUB_OUTPUT
          echo "Chocolatey Package: $chocolateyPackage"
          echo "Chocolatey Package Version: $chocolateyPackageVersion"

      - name: Setup .NET Core
        if: ${{ steps.changed-files-count.outputs.changedFilesCount != 0 }}
        uses: actions/setup-dotnet@v1

      - name: Get Latest Tag After Releasing
        id: get-latest-tag-after-release
        uses: oprypin/find-latest-tag@v1.1.1
        with:
          repository: jasonmcboyd/Environment
          releases-only: true
          prefix: "${{ inputs.release_prefix }}-v"

      - name: Get Latest Release Information After Releasing
        id: latest-release-after-release
        run: |
          $latestRelease = '${{ steps.get-latest-tag.outputs.tag }}'
          '${{ steps.get-latest-tag.outputs.tag }}' -match '${{ inputs.release_prefix }}-v(?<major>\d+)\.' | Out-Null
          $majorVersionNumber = $Matches.major
          $versionNumber = "$majorVersionNumber.0.0"
          $latestReleaseUrl = "https://github.com/jasonmcboyd/Environment/releases/download/$latestRelease/${{ inputs.release_prefix }}.zip"
          echo "LatestRelease=$latestRelease" >> $env:GITHUB_OUTPUT
          echo "LatestReleaseMajorVersionNumber=$majorVersionNumber" >> $env:GITHUB_OUTPUT
          echo "LatestReleaseVersionNumber=$versionNumber" >> $env:GITHUB_OUTPUT
          echo "LatestReleaseUrl=$latestReleaseUrl" >> $env:GITHUB_OUTPUT
          echo "Latest Release: $latestRelease"
          echo "Latest Release Major Version Number: $majorVersionNumber"
          echo "Latest Release Version Number: $versionNumber"
          echo "Latest Release URL: $latestReleaseUrl"

      - name: Push NuGet Package
        if: ${{ steps.chocolatey-version.outputs.ChocolateyPackageVersion != steps.latest-release-after-release.outputs.LatestReleaseVersionNumber }}
        run: |
          cd ./Publish/environment-${{ inputs.release_prefix }}
          mkdir /working/tools
          Invoke-WebRequest ${{ steps.latest-release-after-release.outputs.LatestReleaseUrl }} -OutFile /working/package.zip
          $releaseFileHash = (Get-FileHash -Path /working/package.zip -Algorithm sha512).Hash
          rm /working/package.zip
          Copy-Item ./*.nuspec /working
          Set-Content -Path /working/tools/chocolateyInstall.ps1 -Value (./createChocolateyInstallScript.ps1 -ReleaseVersion $latestReleaseVersion -ReleaseUrl ${{ steps.latest-release-after-release.outputs.LatestReleaseUrl }} -ReleaseFileHash $releaseFileHash)
          cd /working
          choco pack ./environment-${{ inputs.release_prefix }}.nuspec --version=$latestReleaseVersion
          dotnet nuget add source '${{ secrets.AZURE_DEVOPS_NUGET_FEED }}' --name environment --username ${{ secrets.AZURE_DEVOPS_USERNAME }} -p ${{ secrets.AZURE_DEVOPS_PAT }}
