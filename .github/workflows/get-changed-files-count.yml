# This is a basic workflow to help you get started with Actions

name: get-changed-files-count

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      subdirectory:
        required: true
        type: string
      release_prefix:
        required: true
        type: string
      files_to_archive:
        required: true
        type: string
    secrets:
      AZURE_DEVOPS_NUGET_FEED:
        required: true
      AZURE_DEVOPS_USERNAME:
        required: true
      AZURE_DEVOPS_PAT:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main
        with:
          fetch-depth: 2

      - name: Get Files Changed Count
        id: changed-files-count
        run: echo "ChangedFilesCount=$((git diff HEAD~ --name-only -- ./${{ inputs.subdirectory }} ./.github/workflows/${{ inputs.release_prefix }}.yml ./Nuspec/environment-${{ inputs.release_prefix }} | Measure-Object).Count)" >> $env:GITHUB_OUTPUT

      - name: Write Files Changed Count
        run: echo "${{ steps.changed-files-count.outputs.ChangedFilesCount }}"

      - name: Get Latest Tag
        id: get-latest-tag
        uses: oprypin/find-latest-tag@v1.1.1
        with:
          repository: jasonmcboyd/Environment
          releases-only: true
          prefix: "${{ inputs.release_prefix }}-v"

      - name: Get Previous Release Information
        id: previous-release
        run: |
          echo "PreviousRelease=${{ steps.get-latest-tag.outputs.tag }}" >> $env:GITHUB_OUTPUT
          '${{ steps.get-latest-tag.outputs.tag }}' -match '${{ inputs.release_prefix }}-v(?<major>\d+)\.' | Out-Null
          echo "LatestReleaseMajorVersionNumber=$($Matches.major)" >> $env:GITHUB_OUTPUT

      - name: Zip Files
        id: zip-files
        if: ${{ steps.changed-files-count.outputs.ChangedFilesCount != 0 }}
        run: |
          Compress-Archive ('${{ inputs.files_to_archive }}'.split('|') -join ' ') ./${{ inputs.release_prefix }}.zip
          echo "ArchiveName=${{ inputs.release_prefix }}.zip" >> $env:GITHUB_OUTPUT

      - name: Get Archive Hash
        id: get-archive-hash
        if: ${{ steps.changed-files-count.outputs.ChangedFilesCount != 0 }}
        run: echo "ArchiveFileHash=$($(Get-FileHash -Path ${{ steps.zip-files.outputs.ARCHIVE_NAME}} -Algorithm sha512).Hash)" >> $env:GITHUB_OUTPUT

      - name: Write Archive Hash
        if: ${{ steps.changed-files-count.outputs.ChangedFilesCount != 0 }}
        run: echo "${{ steps.get-archive-hash.outputs.ArchiveFileHash }}"

      - name: Get Next Version
        id: get-next-version
        if: ${{ steps.changed-files-count.outputs.ChangedFilesCount != 0 }}
        run: |
          echo "NextVersion=$([int]${{ steps.previous-releasel.output.LatestReleaseMajorVersionNumber }} + 1).0.0"

      - name: Get Next Release
        id: get-next-release
        if: ${{ steps.changed-files-count.outputs.COUNT != 0 }}
        run: echo "NextRelease=${{ env.RELEASE_PREFIX }}-v${{ steps.get-next-version.outputs.NextVersion }}" >> $env:GITHUB_OUTPUT

      - name: Write Next Release
        if: ${{ steps.changed-files-count.outputs.COUNT != 0 }}
        run: echo "${{ steps.get-next-release.outputs.NextRelease }}"

      - name: Release
        if: ${{ steps.changed-files-count.outputs.COUNT != 0 }}
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.zip-files.outputs.ArchiveName }}
          tag_name: ${{ steps.get-next-release.outputs.NextRelease }}

      - name: Get Chocolatey Version
        id: chocolatey-version
        run: |
          choco sources add -n environment -u ${{ secrets.AZURE_DEVOPS_USERNAME }} -p ${{ secrets.AZURE_DEVOPS_PAT }} -s ${{ secrets.AZURE_DEVOPS_NUGET_FEED }}
          echo "ChocolateyVersion=$((choco search environment-${{ inputs.release_prefix }} --source environment --limitoutput --exact).Split('|')[1])" >> $env:GITHUB_OUTPUT

      - name: Write Stuff
        run: |
          echo "${{ steps.previous-release.outputs.PreviousRelease }}"
          echo "${{ steps.previous-release.outputs.LatestReleaseMajorVersionNumber }}"
          echo "${{ steps.chocolatey-version.outputs.ChocolateyVersion }}"

      - name: Setup .NET Core
        if: ${{ steps.files-changed-count.outputs.COUNT != 0 }}
        uses: actions/setup-dotnet@v1

      - name: Get Latest Tag After Releasing
        id: get-latest-tag-after-release
        uses: oprypin/find-latest-tag@v1.1.1
        with:
          repository: jasonmcboyd/Environment
          releases-only: true
          prefix: "${{ inputs.release_prefix }}-v"

      - name: Get Previous Release Information After Releasing
        id: previous-release
        run: |
          echo "PreviousRelease=${{ steps.get-latest-tag-after-release.outputs.tag }}" >> $env:GITHUB_OUTPUT
          '${{ steps.get-latest-tag-after-release.outputs.tag }}' -match '${{ inputs.release_prefix }}-v(?<major>\d+)\.' | Out-Null
          echo "LatestReleaseMajorVersionNumber=$($Matches.major)" >> $env:GITHUB_OUTPUT
